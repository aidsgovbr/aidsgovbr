<?php

/**
 * Implements hook_wysiwyg_plugin().
 */
function ckeditor_insert_wysiwyg_plugin($editor, $version) {
  if ($editor == 'ckeditor') {
    return [
      'insert' => [
        'internal' => FALSE,
        'path'     => drupal_get_path('module', 'ckeditor_insert') . '/plugin',
        'filename' => 'plugin.js',
        'buttons'  => [
          'insertFileDialog'  => t('Insert a file'),
          'insertImageDialog' => t('Insert an image'),
        ],
        'load'     => TRUE,
      ],
    ];
  }
  return NULL;
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ckeditor_insert_ckeditor_plugin() {
  return [
    'insert' => [
      'name'    => 'insert',
      'desc'    => t('Buttons for Insert module'),
      'path'    => drupal_get_path('module', 'ckeditor_insert') . '/plugin/',
      'buttons' => [
        'insertFileDialog'  => [
          'icon'  => 'images/insertfile.png',
          'label' => 'Insert a file',
        ],
        'insertImageDialog' => [
          'icon'  => 'images/insertimage.png',
          'label' => 'Insert an image',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_permission().
 */
function ckeditor_insert_permission() {
  return [
    'access ckeditor insert'     => [
      'title' => t('Access <em>CKEditor Insert</em>'
      ),
    ],
    'administer ckeditor insert' => [
      'title' => t('Administer <em>CKEditor Insert</em>'
      ),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function ckeditor_insert_menu() {
  $items['admin/config/content/ckeditor_insert'] = [
    'title'            => 'CKEditor Insert',
    'description'      => 'Configure CKEditor Insert.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => ['ckeditor_insert_settings_form'],
    'access arguments' => ['administer ckeditor insert'],
    'file'             => 'ckeditor_insert.admin.inc',
  ];
  return $items;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ckeditor_insert_field_widget_form_alter(&$element, &$form_state, $context) {
  if (user_access('access ckeditor insert')) {
    $keys = [
      'file',
      'image',
    ];
    foreach ($keys as $key) {
      if (isset($element['#field_name']) && in_array($element['#field_name'], variable_get('ckeditor_insert_' . $key . '_fields', []))) {
        // We need a theme wrapper because #prefix and #suffix are already used
        // later.
        $element['#theme_wrappers'][] = 'ckeditor_insert_wrapper';
        $element['#ckeditor_insert_key'] = $key;
        $element['#attached']['css'] = [drupal_get_path('module', 'ckeditor_insert') . '/ckeditor_insert.css'];
        $element['#attached']['js'] = [drupal_get_path('module', 'ckeditor_insert') . '/ckeditor_insert.js'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function ckeditor_insert_preprocess_html(&$vars) {
  // This is set by theme_ckeditor_insert_wrapper.
  global $ckeditor_insert;
  if (isset($ckeditor_insert)) {
    $vars['page']['page_bottom']['ckeditor_insert'] = [
      'ckeditor_insert' => [
        '#markup' => '<div id="ckeditor_insert_fade" class="ckeditor_insert_white_overlay"></div>',
      ],
    ];
  }
}

/**
 * Implements hook_theme().
 */
function ckeditor_insert_theme() {
  return [
    'ckeditor_insert_wrapper' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Theme wrapper
 *
 * @param $variables
 *
 * @return string
 */
function theme_ckeditor_insert_wrapper($variables) {
  global $ckeditor_insert;
  $key = $variables['element']['#ckeditor_insert_key'];
  // This is used in ckeditor_insert_preprocess_html() to append a div at the end
  // of HTML body.
  $ckeditor_insert = TRUE;
  return '<div id="ckeditor_' . $key . '_insert_light" class="ckeditor_insert_dialog">' .
    $variables['element']['#children'] .
    '<a id="ckeditor_' . $key . '_insert_close_button">' . t('Close') . '</a>' .
    '</div>';
}
