<?php

/**
 * @file
 * Adds support for javascript pullquotes selected from text by adding a span.
 */

/**
 * Default setting to use with variable_get('pullquote_scope').
 */
define('PULLQUOTE_SCOPE_DEFAULT', 0);

/**
 * Default setting to use with variable_get('pullquote_content_by_type').
 */
define('PULLQUOTE_CONTENT_BY_TYPE_DEFAULT', 0);

/**
 * Default setting to use with variable_get('pullquote_load_by_view_mode').
 */
define('PULLQUOTE_VIEW_MODE_LOAD_DEFAULT', 1);

/**
 * Default setting to use with variable_get('pullquote_css').
 */
define('PULLQUOTE_DEFAULT_CSS', 'pullquote_style_1.css');

/**
 * Implements of hook_menu().
 */
function pullquote_menu() {
  $items['admin/config/content/pullquote'] = array(
    'title' => 'Pullquote Global Configuration',
    'description' => 'Configure Pullquote settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pullquote_admin_settings_form'),
    'access arguments' => array('administer pullquote settings'),
    'file' => 'pullquote.admin.inc',
  );
  $items['admin/config/content/pullquote-style'] = array(
    'title' => 'Change Pullquote Styles',
    'description' => 'Change Pullquote Styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pullquote_admin_styles_form'),
    'access arguments' => array('change pullquote styles'),
    'file' => 'pullquote.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Define Pullquote permissions.
 */
function pullquote_permission() {
  $perm = array(
    'administer pullquote settings' => array(
      'title' => t('Administer Pullquote Settings'),
    ),
    'change pullquote styles' => array(
      'title' => t('Change Pullquote Styles'),
    ),
  );
  return $perm;
}

/**
 * Implements hook_page_alter().
 *
 * Includes a CSS and JS file for pullquote on every page load.
 */
function pullquote_page_alter(&$page) {
  // If global scope add the css and js on each load.
  if (variable_get('pullquote_scope', PULLQUOTE_SCOPE_DEFAULT) == 1) {
    $path = drupal_get_path('module', 'pullquote');
    $css_file = variable_get('pullquote_css', 'FALSE');
    if (!$css_file) {
      $css_file = $path . '/css/pullquote_style_1.css';
    }
    $page['content']['#attached']['css'][] = $css_file;
    $page['content']['#attached']['js'][] = $path . '/pullquote.js';
  }
}

/**
 * Implements hook_node_view().
 *
 * Includes a CSS and JS file on nodes that match the user selected type(s).
 */
function pullquote_node_view($node, $view_mode, $langcode) {
  if (pullquote_node_enabled($node, $view_mode)) {
    $path = drupal_get_path('module', 'pullquote');
    $css_file = variable_get('pullquote_css', FALSE);
    if (!$css_file) {
      $css_file = $path . '/css/pullquote_style_1.css';
    }
    $node->content['#attached']['css'][] = $css_file;
    $node->content['#attached']['js'][] = $path . '/pullquote.js';
  }
}

/**
 * Check if pullquote code should be loaded onto the node.
 *
 * @param stdClass $node
 *   A fully loaded node object.
 *
 * @param  string $view_mode
 *   A string denoting the view mode in which to display the node.
 *
 * @return bool
 *   TRUE if pullquote code should be loaded, otherwise FALSE.
 */
function pullquote_node_enabled($node, $view_mode) {
  // Fail fast. Don't bother enabling on nodes if we have global scope.
  $pullquote_global_scope = variable_get('pullquote_scope', PULLQUOTE_SCOPE_DEFAULT) == 1 ? TRUE : FALSE;
  if ($pullquote_global_scope) {
    return FALSE;
  }
  // Check if we should load on content only.
  else {
    $content_by_type = variable_get('pullquote_content_by_type', PULLQUOTE_CONTENT_BY_TYPE_DEFAULT) == 1 ? TRUE : FALSE;
    $load_by_view_mode = variable_get('pullquote_load_by_view_mode', PULLQUOTE_VIEW_MODE_LOAD_DEFAULT) == 1 ? TRUE : FALSE;
    //$types
    $view_modes = variable_get('pullquote_view_modes', array('full' => TRUE));
    if (!$content_by_type) {
      // Check for view modes.
      // Enable if we should load on all view modes.
      if (!$load_by_view_mode) {
        return TRUE;
      }
      // Otherwise check if the view mode for this node is in our settings.
      elseif (isset($view_modes[$view_mode]) && $view_modes[$view_mode]) {
        return TRUE;
      }
    }
    // Otherwise we care about loading on a per content type basis so check this
    // node's type
    else {
      $types = variable_get('pullquote_content_types', array());
      // Fail if we care about checking by types and this node doesn't match.
      if (empty($types[$node->type]) || !$types[$node->type]) {
        return FALSE;
      }
      if (!$load_by_view_mode) {
        return TRUE;
      }
      // Otherwise check if the view mode for this node is in our settings.
      elseif ($view_modes[$view_mode]) {
        return TRUE;
      }
    }
  }
  // Return FALSE if all checks fail.
  return FALSE;
}

/*
 * Implements hook_help().
 *
 * See http://drupal.org/node/632280
 */
function pullquote_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#pullquote':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Pullquote creates a nicely formatted pullquote from a selection of text in a node. The actual text is duplicated with JavaScript and styled with CSS. You can choose from several styles or add your own pullquote styles either by pointing to a CSS file you have added to the site\'s files or uploading a new custom style sheet.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Surround any text to be made into a pullquote with a span that has the class \'pullquote\'. For example:') . '</p>';
      $output .= '<p><code>' . t('&lt;span class="pullquote"&gt;Quoth the raven.&lt;/span&gt;') . '</code></p>';
      $output .= '<p>' . t('The module also includes a text filter so make this task easier for users who are not HTML savvy. To use the filter, enable it for your content type and surround the desired text with tokens like this:') . '</p>';
      $output .= '<p><code>' . t('[pullquote]This is quote worthy.[/pullquote]') . '</code></p>';
      $output .= '<p>' . t('Users of markdown without a WYSIWYG may prefer an alternate syntax that does not resemble Markdown style links:') . '</p>';
      $output .= '<p><code>' . t('&lt;pullquote&gt;This is quote worthy.&lt;/pullquote&gt;') . '</code></p>';
      $output .= '<p>' . t('Pullquote has WYSIWYG integration. Currently this works best with TinyMCE. CKEditor also works but has some glitches.') . '</p>';
      $output .= '<p>' . t('For more information be sure to read the README file that is packaged with this module and see the Online handbook entry for <a href="http://drupal.org/project/pullquote">Pullquote module</a>') . '</p>';
  }
  return $output;
}

/**
 * Implements hook_wysiwyg_include_directory().
 *
 * Allow WYSIWYG integration.
 */
function pullquote_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return 'plugins/wysiwyg';
  }
}

/**
 * Implements hook_ckeditor_plugin().
 *
 * Allow CKeditor module intergration
 */
function pullquote_ckeditor_plugin() {
  return array(
    'pullquote' => array(
      // Name of the plugin used to write it
      'name' => 'pullquote',
      // Description of plugin - it would appear in plugins managment of profile settings
      'desc' => t('Support for Pullquote module'),
      // The full path to the CKEditor plugin directory, with trailing slash.
      'path' => base_path() . drupal_get_path('module', 'pullquote') . '/plugins/ckeditor/',
      // Buttons to show up in the toolbar config area.
      'buttons' => array(
        'pullquote' => array(
          'label' => 'Pullquote',
          'icon' => '../wysiwyg/pullquote.gif',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function pullquote_filter_info() {
  $filters['pullquote'] = array(
    'title' => t('Pullquote'),
    'description' => t('Allows the user to create a pullquote by surrounding text with simple tokens.'),
    'process callback' => 'pullquote_filter_pullquote_process',
    'tips callback' => '_pullquote_filter_pullquote_tips',
  );
  return $filters;

}

/**
 * Filter processing for pullquote.
 *
 * Provide a simple token for use by non-HTML-savvy users.
 */
function pullquote_filter_pullquote_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = pullquote_process_text($text, FALSE);
  $text = pullquote_process_text($text, TRUE);
  return $text;
}

function pullquote_process_text($text, $left) {
  $pullquote = 'pullquote';
  $pullquote_class = 'pullquote';
  if ($left === TRUE) {
    $pullquote = 'pullquote-left';
    $pullquote_class = 'pullquote pullquote-left';
  }
  // Replace the tokens with span tags if and only if the starting tag has a
  // matching ending tag.
  if (strpos($text, '[' . $pullquote . ']') !== FALSE && strpos($text, '[/' . $pullquote . ']') !== FALSE) {
    $text = str_replace('[' . $pullquote . ']', '<span class="' . $pullquote_class . '">', $text);
    $text = str_replace('[/' . $pullquote . ']', '</span>', $text);
  }
  else {
    $text = str_replace('[' . $pullquote . ']', '', $text);
    $text = str_replace('[/' . $pullquote . ']', '', $text);
  }

  // Alternate Syntax for conflicts with Markrdown.
  if (strpos($text, '{' . $pullquote . '}') !== FALSE && strpos($text, '{/' . $pullquote . '}') !== FALSE) {
    $text = str_replace('{' . $pullquote . '}', '<span class="' . $pullquote_class . '">', $text);
    $text = str_replace('{/' . $pullquote . '}', '</span>', $text);
  }
  else {
    $text = str_replace('{' . $pullquote . '}', '', $text);
    $text = str_replace('{/' . $pullquote . '}', '', $text);
  }
  return $text;
}

/**
 * Tips callback for pullquote filter.
 */
function _pullquote_filter_pullquote_tips($filter, $format, $long) {
  return check_plain(t('To make a selection of text into a pullquote add [pullquote] at the start of the quote and [/pullquote] at the end. Users of Markdown may prefer the alternate {pullquote} {/pullquote} syntax. Note that failure to include a closing tag will prevent the pullquote from being processed. You may also use [pullquote-left] to creaet a pullquote on the left side of the text.'));
}
